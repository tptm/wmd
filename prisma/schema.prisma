datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    Password?
  Tasks       Task[]
  userState   UserState?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model UserState {
  id  Int @id @default(autoincrement())

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  dayTop Task? @relation("Day top", fields: [dayTopId], references: [id])
  weekTop Task? @relation("Week top", fields: [weekTopId], references: [id])
  backlogTop Task? @relation("Backlog top", fields: [backlogTopId], references: [id])

  userId  String @unique
  dayTopId Int? @unique
  weekTopId Int? @unique
  backlogTopId Int? @unique
}

model Task {
  id      Int @id @default(autoincrement())
  title   String
  comment String?
  status  String // @todo make enum

  upstackId Int?  @unique
  upstack   Task?   @relation("Priority", fields: [upstackId], references: [id])
  downstack Task?   @relation("Priority")

  dayTopUserState   UserState?  @relation("Day top")
  weekTopUserState  UserState?  @relation("Week top")
  backlogTopUserState   UserState?  @relation("Backlog top")

  topSubtask    SubTask? @relation(fields: [topSubtaskId], references: [id], onDelete: NoAction)
  topSubtaskId  Int?     @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model SubTask {
  id      Int @id @default(autoincrement())
  title   String
  comment String?
  status  String // @todo make enum

  upstackId Int?  @unique
  upstack   SubTask?   @relation("Priority2", fields: [upstackId], references: [id])
  downstack SubTask?   @relation("Priority2")

  parentTask  Task?
}