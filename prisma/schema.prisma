datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todayTopTaskId Int? @unique
  todayTop Task? @relation("Today top", fields: [todayTopTaskId], references: [id]) 
  upnextTopTaskId Int? @unique
  upnextTop Task? @relation("Upnext top", fields: [upnextTopTaskId], references: [id]) 
  backlogTopTaskId Int? @unique
  backlogTop Task? @relation("Backlog top", fields: [backlogTopTaskId], references: [id]) 

  password    Password?
  tasks       Task[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Task {
  id Int @id @default(autoincrement())

  title String
  comment String?
  status Int @default(0) // 0 - to do, 1 - done, 2 - rejected
  prevId Int? @unique
  list Int @default(0) // 0 - today, 1 - upnext, 2 - backlog
  topSubtaskId Int? @unique
  userId String

  prev Task? @relation("Priority", fields: [prevId], references: [id])
  next Task? @relation("Priority")
  topSubtask SubTask? @relation(fields: [topSubtaskId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  todayTopForUser User? @relation("Today top")
  upnextTopForUser User? @relation("Upnext top")
  backlogTopForUser User? @relation("Backlog top")
}

model SubTask {
  id Int @id @default(autoincrement())
  
  title String
  comment String?
  status Int // 0 - to do, 1 - done, 2 - rejected
  prevId Int?  @unique

  prev   SubTask?   @relation("Priority2", fields: [prevId], references: [id])
  next SubTask?   @relation("Priority2")
  parentTask  Task?
}
